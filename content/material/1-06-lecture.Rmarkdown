---
title: "Advanced Data Wrangling with `dplyr`"		
linktitle: "Lecture	6: Advanced  Data Wrangling with `dplyr`"
date: "2021-02-22"
start_date: "2021-02-22"
end_date: "2021-02-25"
menu:
  Material:
    parent: Lectures
    weight: 6
type: docs
toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      message = FALSE, 
                      warning = FALSE)
```

# Learning Outcomes

- Apply additional dplyr 1.0 functions to manipulate data and data frames for analysis
  + `across()`
  + `case_when()`
  + `rownames_to_columns()`
  + `distinct()`
  + `rowwise()`

- Understand implications of data masking and tidy-select approaches to variables in writing functions with dplyr

# Introduction
- dplyr 1.0 introduced new functions to ease manipulating or summarizing data frames by rows or by columns. We will follow the vignettes for these new capabilities `rowwise()` and `across()`
- Several other dplyr verbs (functions) are often useful for special situations you may face with messy data
- Finally, the tidyverse makes tradeoffs in its approaches to handling variable names that can blur the distinction between variables names *in the environment*, e.g., created with `<-`, versus variable names *in a data frame*, e.g., `df$var_1`. 
- These tradefoffs are designed to make common operations easier but can make programming with dplyr more complicated. 

- We will be using the tidyverse and the dplyr::starwars data frame (see help or `?dplyr::starwars`)
- Load the tidyverse and the starwars data and look at the data.
```{r, message=FALSE}
library(tidyverse)
data(starwars)
head(starwars)
nrow(starwars)
```


# Column-wise operations with `across()`
~[]("/img/dplyr_across.png")

- dplyr has had more capability for functions for operating on columns than on rows but it was not always convenient.
- If you want to perform the same operation on multiple columns, copying and pasting could be tedious and error prone:
```{r eval = FALSE}
df %>% 
      group_by(g1, g2) %>% 
      summarise(a = mean(a), b = mean(b), c = mean(c), d = mean(d))
```

- We can now use the `across()` function to write this kind of operation more succinctly and transparently:
```{r eval = FALSE}
df %>% 
      group_by(g1, g2) %>% 
      summarise(across(a:d, mean))
```
      
- `across()` provides new functionality while replacing older functions such as `mutate_if()` or `mutate_at()`    

- We've loaded tidyverse (including dplyr) already.

## Basic Usage of `across()`

- `across` is only used inside other functions, e.g., `summarize()` or `mutate()`
- Like `group_by()` and `rowwise()`, it does not change the data itself but changes how other functions operate on the data.

- `across()` has two primary arguments:
- `.cols = ` selects the columns you want to manipulate (notice the period at the beginning). 
  + It uses tidy selection (like `select()`) so you can pick variables by position, name, and type.
  + The default is `.cols = everything()` so all columns are selected
- `.fns = `, is a function (or a list of functions) you want to apply to each column (.again, note the period at the beginning of the argument name)
  + Examples: `.fns = mean` or `.fns = max`
  + This can also be a purrr style formula like `~ .x / 2`. 
    - The `.x` is the "pronoun" for the columns that get passed to the function
    - We did this in the last `rowwise()` example. 
    - This argument is optional so you can omit it to leave the data  untransformed

## Using `across()` with `summarize()`
- Here are a couple of examples of `across()` in conjunction with its favorite verb, `summarize()`. 

- We use `where()` inside the across to select only those columns of the desired type
- `.fns=` can take a single function
- You can add additional arguments to be passed to the function, e.g., `na.rm = TRUE` ...
```{r, message = FALSE}
starwars %>% 
  summarise(across(where(is.numeric), 
                   .fns = median))

# Example with argument    
starwars %>% 
  summarise(across(where(is.numeric), 
                   .fns = median, 
                   na.rm = TRUE))

```

- The formula approach gives us the ability to combine functions with arguments
    + Using this, you start with the `~` to signify "as a function of" and then put wherever your column name would normally as a `.x`. 
```{r}
starwars %>% 
          summarise(across(where(is.numeric), 
                           ~ median(.x, na.rm = TRUE)))
```

- Let's count how many unique values for character variables using formula style 

```{r, message = FALSE}
# length of unique characters just for hair_color
starwars %>% 
  summarize(unique(hair_color))

starwars %>% 
  summarize(length(unique(hair_color)))

# summarize all character columns... 
starwars %>% 
  summarise(across(where(is.character), 
                   ~ length(unique(.x))))
```

- Example with group by species and filter for groups with >1 row and adding a summary that is not inside across to count the rows in each group
```{r, message = FALSE}
starwars %>% 
  group_by(species) %>% 
  filter(n() > 1) %>% 
  summarise(across(c(sex, gender, homeworld), 
                   ~ length(unique(.x))),
                   n=n())
```

- Example with group by homeworlds
```{r, message = FALSE}
starwars %>% 
  group_by(homeworld) %>% 
  filter(n() > 1) %>% 
  summarise(across(where(is.numeric), 
                   ~ max(.x, na.rm = TRUE)))    
```

- Because across() is usually used in combination with `summarize()` and `mutate()`, **it doesn’t select grouping variables** to avoid accidentally modifying them:
- Example where the grouping variable `g` is not selected, even though it is numeric, so is not summed.
````{r, message= FALSE}
df <- data.frame(g = c(1, 1, 2), x = c(-1, 1, 3), y = c(-1, -4, -9))
df
df %>% 
  group_by(g) %>% 
  summarise(across(where(is.numeric), sum))
```


## Using `across()` with Multiple Functions

- You can transform each variable with more than one function 
- Supply a **named list** of functions in the second argument:
```{r}

# Example with no list but argument
starwars %>% 
  summarise(across(where(is.numeric),
                   .fns = list(median, mean), 
                    na.rm = TRUE))  

# Example with list and argument
starwars %>% 
  summarise(across(where(is.numeric),
                   .fns = list(median = median, mean = mean), 
                    na.rm = TRUE))  

```

### Controlling  Names
In the last case where we wanted to create a median and mean across all numeric variables, you'll notice that the new variable names were always `{name_of_variable}_{mean/median}`. This is the default behavior of across - the name, an underscore, and the name of the function from the named list provided. To customize how things are named, you can use `glue` syntax (we'll cover what glue is in a few weeks) and the `.names` argument. 
+ `{.fn}` will refer to the name of the function you used
+ `{.col}` will refer to the name of the column

```{r}

#change to {function}_{column}
starwars %>% 
  summarise(across(where(is.numeric),
                   .fns = list(median = median, mean = mean), 
                    na.rm = TRUE,
                   .names = "{.fn}_{.col}"))  

#change to {function}_{column}
starwars %>% 
  summarise(across(where(is.numeric),
                   .fns = list(median = median, mean = mean), 
                    na.rm = TRUE,
                   .names = "The {.fn} of {.col}"))  
```

## Gotchas - Order Matters

- Be careful when combining numeric summaries with `is.numeric()`:

```{r}
df <- data.frame(x = c(1, 2, 3), y = c(1, 4, 9))
df
df %>% 
  summarise(n = n(), across(where(is.numeric), sd))
```
    
- Here n became `NA` because n is numeric, so the `across()` computes its standard deviation, and the standard deviation of 3 (a constant) is `NA`. 
- You probably want to compute `n()` last to avoid this problem:

```{r}
df %>% 
  summarise(across(where(is.numeric), sd), n = n())
```
### Some other examples 

- Example: Find all rows where no variable has missing values:
```{r}
starwars %>% filter(across(everything(), ~ !is.na(.x)))
```

- For some verbs, like `group_by()`, `count()` and `distinct()`, you can omit the summary functions:
- Example: Find all distinct rows for variables with the word color in the name
```{r}
starwars %>% distinct(across(contains("color"))) %>% 
  arrange(hair_color, skin_color)
```

- Example: Count all combinations of variables with a given pattern:
```{r}
starwars %>% count(across(contains("color")), sort = TRUE) %>% 
  arrange(hair_color, skin_color)
```
- `across()` doesn’t work with `select()` or `rename()` because they already use tidy select syntax; 


### Exercise

- Calculate the median for each numeric variable for each species and gender 
```{r}
starwars %>% 
  group_by(species, gender) %>% 
  summarise(across(where(is.numeric), 
                   ~ median(.x, na.rm = TRUE)))
```

- Calculate the min and max for each numeric variable other than birth year for each species and gender and count how many are in each group and sort from largest to smallest count.    
```{r}
starwars %>% 
  group_by(species, gender) %>% 
  summarise(across(where(is.numeric) & !birth_year, 
                   .fns = list(min = ~ min(.x, na.rm = TRUE), 
                               max = ~ max(.x, na.rm = TRUE))), 
            n=n()) %>% 
  arrange(desc(n))
```

# `case_when()`
~[]("/img/dplyr_case_when_sm.png")

- This function allows you to vectorize (and replace) multiple `if_else()` statements in a succinct and clear manner.
- The syntax is `case_when(...)`
- The `dot dot dots` are a placeholder for a series of two-side formulas
  + The Left hand side (LHS) determines which variables match a given case - this must return a logical vector
  + The Right hand side (RHS) provides the new or replacement value and all have to be of the same type of vector
  + Both LHS and RHS may be of length either 1 or `n`
  + you always end with a case of TRUE for when all of the other cases are FALSE

- Example of a vectorized if - else
```{r}
x <- 1:16

case_when(
  x < 5 ~ "less than 5",
  x < 10 ~ "less than 10",
  TRUE ~ as.character(x)
)


# From https://www.hackerrank.com/challenges/fizzbuzz/problem
case_when(
  x %% 15 == 0 ~ "fizz buzz",
  x %% 3 == 0 ~ "fizz",
  x %% 5 == 0 ~ "buzz",
  TRUE ~ as.character(x)
)
```

- Like an if statement, the arguments are evaluated in order, so you must proceed from the most specific to the most general. 
- This won't work:

```{r}
case_when(
  TRUE ~ as.character(x),
  x %%  5 == 0 ~ "fizz",
  x %%  7 == 0 ~ "buzz",
  x %% 35 == 0 ~ "fizz buzz"
)
```
    
- `case_when()` is **particularly useful inside `mutate()`** when you want to create a new variable that relies on a complex combination of existing variables     
```{r}
starwars %>%
  select(name:mass, gender, species) %>%
  mutate(
    height_cat = case_when(
      height > 191 ~ "tall",
      height < 167 ~ "short",
      TRUE  ~ "average"
    )
  )

starwars %>%
  select(name:mass, gender, species) %>%
  mutate(
    height_cat = case_when(
      height > quantile(height, 3/4, na.rm = TRUE) ~ "tall",
      height < quantile(height, 1/4, na.rm = TRUE) ~ "short",
      TRUE  ~ "average"
    )
  ) 

# But this can be even more complicated... 
starwars %>%
  select(name:mass, gender, species) %>%
  mutate(
    type = case_when(
      height > 200 | mass > 200 ~ "large",
      species == "Droid"        ~ "robot",
      TRUE                      ~ "other"
    )
  )
```
  
## `tibble::rownames_to_columns()` 
- You many occasionally see data sets where there are row names. 
- This is allowed but not common with data frames as row names are removed when using `[...]`
- Tidy data (a tibble) does not use row_names so they are stripped when coerced to a tibble
- dplyr had a function `add_rownames()` but that has been replaced (deprecated) by the `tibble::rownames_to_columns()`
- Generally, it is best to avoid row names, because they are basically a character column with different semantics than every other column.
- To detect if a data frame has row_names use `has_rownames()`
```{r}
head(state.x77)
str(state.x77)
has_rownames(as_tibble(state.x77))
has_rownames(state.x77)
has_rownames(as.data.frame(state.x77))

```

- To convert the row names to a variable, convert to a data.frame is necessary, and use `rownames_to_column()`
- e.g., `rownames_to_column(.data, var = "rowname")`
- Then convert to a tibble using `as_tibble()`
```{r}
rownames_to_column(as.data.frame(state.x77), "State") %>% 
  str() %>% 
  as_tibble()
```

### Exercise

- Check if the `mtcars` data set has row names. If so, convert the rownames to a column named `car` and convert to a tibble
```{r}
has_rownames(mtcars)
rownames_to_column(mtcars, var = "car") %>% 
  as_tibble()
```

## `distinct()`
- We used `distinct()` earlier to remove duplicate entries in a group by grouping. 
- `distinct()` subsets only unique/distinct rows from a data frame. 
- Rows are a subset of the input but appear in the same order.
- Columns are not modified by default
- Groups are not modified.
- Data frame attributes are preserved.
- Example with 
```{r}
starwars %>% 
  distinct(homeworld) 

starwars %>% 
  distinct(homeworld, species)

#Very similar to count()... 
starwars %>% 
  count(homeworld, species)

# Example from a "student hours question on gapminder... 
library(gapminder)
data(gapminder)
gapminder %>% 
  distinct(continent, country) %>% 
  count(continent)
```


# Row-wise operations with `rowwise()`
- Before version 1.0, dplyr did not have special capabilities for operating on subsets of rows. You had to use for-loops for operating across rows or subsets of rows.
- dplyr 1.0 added the new verb `rowwise()` to create multiple one-row data frames out of an existing data frame
- These row-wise data frames are "virtual" subsets of the original data frame - - You can operate on each subset data frame as if it were its own data frame.
- We will discuss a common use case: computing aggregates across multiple columns within a row

## Creating row-wise data frames
- Row-wise operations require a special type of grouping where each group consists of a **single row**. 
- You create this grouping using `rowwise()`
- Like `group_by()`, `rowwise()` doesn’t really do anything itself; it just changes how the other dplyr verbs work. 
- For example, compare the results of `mutate()` in the following code:
```{r}
fruits <- tribble(
  ~"fruit", ~"height_1", ~"height_2", ~"height_3", ~"width", ~"weight",
  "Banana", 4, 4.2, 3.5, 1, 0.5,
  "Strawberry", 1, .9, 1.2, 1, .25,
  "Pineapple", 18, 17.7, 19.2, 6, 3)
fruits

# mean across all values in all rows
fruits %>% 
  mutate(height_mean = mean(c(height_1, height_2, height_3))) 


# mean across all values in each row
fruits %>% 
  rowwise(fruit) %>% 
  mutate(height_mean = mean(c(height_1, height_2, height_3)))


```

## Per-row Summary Statistics
- `dplyr::summarize()` makes it really easy to summarize values across the rows within one column. 
- We can combine `rowwise()` and `summarize()` to make it easy to summarize values *across columns within one row*. 
- We’ll start by making a little dataset:

```{r}
df <- tibble(id = 1:6, w = 10:15, x = 20:25, y = 30:35, z = 40:45)
df
```
- Let’s say we want compute the sum of w, x, y, and z for each row. 
- We start by making a row-wise data frame:
- We then use `mutate()` to add a new column to each row, or.
- Just use `summarise()` to return the summary:
```{r}
rf <- df %>% rowwise(id)
# mutate to add new column for each row
rf %>% mutate(total = sum(c(w, x, y, z)))

# summarize without mutate
rf %>% summarise(total = sum(c(w, x, y, z)), .groups= "drop")
```

- If you have a lot of variables, you can use `c_across()` to succinctly select many variables (`c_across()` uses tidy select helpers)
- The `where(is.numeric())` ensures we only select numeric columns

```{r}
rf %>% mutate(total = sum(c_across(w:z)))
rf %>% mutate(total = sum(c_across(where(is.numeric))))

# If we want to use our fruits example... 
fruits %>% 
  rowwise(fruit) %>% 
  mutate(height_mean = mean(c_across(contains("height"))))

```
- so c_across is a _rowwise_ version of the function we learned earlier, across. 

- You could combine c_across with column-wise across to compute the proportion of the total for each column:
```{r}
rf %>% #our row-wise data frame
  mutate(total = sum(c_across(w:z))) %>% #total each row
  ungroup() %>% # ungroup the rows
  mutate(across(w:z, ~ .x / total)) # the .x represents each column
```


### Exercise
- Let's create a new variable for the starwars data frame with the maximum of the height, mass, or birth year for each starwars character. Who has the maximum of all the characters?
```{r}
starwars %>% 
  filter(!is.na(height), !is.na(mass),) %>%
  rowwise() %>% 
  mutate(max_a = max(height, mass, na.rm = TRUE)) %>% 
  relocate(max_a) %>% 
  ungroup() %>% 
  select(name, where(is.numeric)) %>% 
  slice_max(max_a) 

starwars %>% 
  filter(!is.na(height), !is.na(mass)) %>%
  rowwise() %>% 
  mutate(max_a = max(height, mass, na.rm = TRUE)) %>% 
  relocate(max_a) %>% 
  ungroup() %>% 
  select(name, where(is.numeric)) %>% 
  filter(max_a == max(max_a))
```


## Bottom Line
- Be aware of the issues that can arise if you try to write complex functions where you are passing arguments with names of variables from the environment, as opposed to referring to variables within a data frame.
- There are solutions but they require additional effort and understanding.

- **References**
  - Chapter 5 of [RDS](https://r4ds.had.co.nz/)
  - [Data Transformation Cheat Sheet](https://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf).
  - [Row-Wise Operations](https://dplyr.tidyverse.org/articles/rowwise.html).
  - [Column-Wise Operations](https://dplyr.tidyverse.org/articles/colwise.html).
  - [Programming with dplyr](https://dplyr.tidyverse.org/articles/programming.html)